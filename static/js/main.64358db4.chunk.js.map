{"version":3,"sources":["models/User.model.ts","utils/capitalizeFirstLetter.ts","stores/CurrentUser.store.ts","stores/RootStore.ts","stores/useStores.ts","components/Avatar.tsx","components/flex.tsx","components/Button.tsx","components/DisplayUser.tsx","components/Loading.tsx","components/EditUser.tsx","App.tsx","index.tsx","utils/localStore.ts"],"names":["GENDER_TYPES","UserModel","name","age","gender","city","photoUrl","this","string","substr","charAt","toUpperCase","slice","String","observable","computed","CurrentUserStore","rootStore","action","createUserData","a","runInAction","currentUser","initialized","refresh","axios","get","raw","data","results","user","first","dob","location","country","picture","medium","RootStore","initState","currentUserStore","serialize","serialized","Promise","all","sync","then","console","log","storesContext","React","createContext","Avatar","styled","div","src","Row","justifyContent","alignItems","crossAxisSize","Column","Button","button","Root","DisplayUser","onRefresh","onDelete","style","marginRight","username","width","textAlign","onClick","background","color","Loading","FromRow","title","children","fontSize","EditUser","value","onChange","e","target","type","isNaN","MALE","FEMALE","App","useContext","Error","useStores","className","delete","mobxStore","JSON","parse","localStorage","getItem","undefined","error","loadState","autorun","state","setItem","stringify","delay","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.64358db4.chunk.js","sourcesContent":["import { computed, observable } from \"mobx\";\nimport { capitalizeFirstLetter } from \"../utils/capitalizeFirstLetter\";\n\nexport type TName = string;\nexport type TCity = string;\nexport type TPhotoUrl = string;\nexport type TAge = number;\n\nexport enum GENDER_TYPES {\n  MALE = \"male\",\n  FEMALE = \"female\",\n}\n\nexport type TGender = GENDER_TYPES;\n\nexport type TCreateUserData = {\n  name?: TName;\n  age?: TAge;\n  gender?: TGender;\n  city?: TCity;\n  photoUrl?: TPhotoUrl;\n};\n\nexport default class UserModel {\n  @observable public name?: TName;\n  @observable public age?: TAge;\n  @observable public gender?: TGender;\n  @observable public city?: TCity;\n  @observable public photoUrl?: TPhotoUrl;\n\n  constructor({ name, age, gender, city, photoUrl }: TCreateUserData) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n    this.city = city;\n    this.photoUrl = photoUrl;\n  }\n\n  @computed get username() {\n    return (\n      capitalizeFirstLetter(this.name?.substr(0, 10) ?? \"\") +\n      String(this.age ?? \"\")\n    );\n  }\n\n  @computed get serialized() {\n    return {\n      name: this.name,\n      age: this.age,\n      gender: this.gender,\n      city: this.city,\n      photoUrl: this.photoUrl,\n    };\n  }\n}\n","export function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import UserModel, { TCreateUserData } from \"../models/User.model\";\nimport { action, observable, runInAction } from \"mobx\";\nimport axios from \"axios\";\nimport RootStore from \"./RootStore\";\n\nexport default class CurrentUserStore {\n  public rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable currentUser: UserModel | null = null;\n  @observable initialized: boolean = false;\n\n  @action sync = async (createUserData?: TCreateUserData) => {\n    if (createUserData != null) {\n      runInAction(() => {\n        this.currentUser = new UserModel(createUserData);\n        this.initialized = true;\n      });\n    } else {\n      await this.refresh();\n    }\n  };\n\n  @action refresh = async () => {\n    this.initialized = false;\n    const raw = (await axios.get(\"https://randomuser.me/api/\")).data.results[0];\n    const user = new UserModel({\n      name: raw.name.first,\n      age: raw.dob.age,\n      gender: raw.gender,\n      city: raw.location.country + \" \" + raw.location.city,\n      photoUrl: raw.picture.medium,\n    });\n\n    runInAction(() => {\n      this.currentUser = user;\n      this.initialized = true;\n    });\n  };\n  @action delete = async () => {\n    this.currentUser = new UserModel({});\n  };\n}\n","import { CurrentUserStore } from \"./index\";\nimport { computed } from \"mobx\";\n\nexport default class RootStore {\n  public currentUserStore: CurrentUserStore;\n\n  constructor(initState?: any) {\n    this.currentUserStore = new CurrentUserStore(this);\n    Promise.all([\n      this.currentUserStore.sync(initState?.currentUserStore?.currentUser),\n    ]).then();\n    console.log(this);\n  }\n\n  @computed get initialized() {\n    return this.currentUserStore.initialized;\n  }\n\n  public serialize = () => ({\n    currentUserStore: {\n      currentUser: this.currentUserStore.currentUser?.serialized,\n    },\n  });\n}\n","import React from \"react\";\nimport RootStore from \"./RootStore\";\n\nexport const storesContext = React.createContext<RootStore | null>(null);\n\nexport const useStores = () => {\n  const rootStore = React.useContext(storesContext);\n  if (rootStore == null) {\n    throw new Error(\"No RootStore found i context\");\n  }\n  return rootStore;\n};\n","import styled from \"@emotion/styled\";\n\nexport const Avatar = styled.div<{ src?: string }>`\n  background: url(${({ src }) => src}) center no-repeat;\n  background-size: contain;\n  border: 2px solid #fff;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n`;\n","import styled from \"@emotion/styled\";\n\ninterface IFlexProps {\n  justifyContent?:\n    | \"start\"\n    | \"flex-end\"\n    | \"space-around\"\n    | \"space-between\"\n    | \"center\";\n  alignItems?:\n    | \"start\"\n    | \"end\"\n    | \"center\"\n    | \"inherit\"\n    | \"unset\"\n    | \"flex-end\"\n    | \"flex-start\";\n  crossAxisSize?: \"min\" | \"max\";\n}\n\nexport const Row = styled.div<IFlexProps>`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${({ justifyContent }) => justifyContent ?? \"start\"};\n  align-items: ${({ alignItems }) => alignItems ?? \"start\"};\n  height: ${({ crossAxisSize }) =>\n    crossAxisSize === \"max\" ? \"100%\" : \"fit-content\"};\n`;\n\nexport const Column = styled.div<IFlexProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${({ justifyContent }) => justifyContent ?? \"start\"};\n  align-items: ${({ alignItems }) => alignItems ?? \"start\"};\n  width: ${({ crossAxisSize }) =>\n    crossAxisSize === \"max\" ? \"100%\" : \"fit-content\"};\n`;\n","import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  border: none;\n  box-shadow: none;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport UserModel from \"../models/User.model\";\nimport { Avatar } from \"./Avatar\";\nimport { Column, Row } from \"./flex\";\nimport { Button } from \"./Button\";\nimport { Observer } from \"mobx-react-lite\";\n\ninterface IProps {\n  user: UserModel;\n  onRefresh: () => void;\n  onDelete: () => void;\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 250px;\n  width: 250px;\n  font-size: 14px;\n  padding: 16px;\n  box-sizing: border-box;\n  border: 1px solid #fff;\n  border-radius: 5px;\n  & > * {\n    margin: 5px 0;\n  }\n`;\n\nconst DisplayUser: React.FC<IProps> = ({ user, onRefresh, onDelete }) => (\n  <Observer>\n    {() => (\n      <Root>\n        <Row>\n          <Avatar src={user.photoUrl} style={{ marginRight: 5 }} />\n          <Column justifyContent=\"space-between\">\n            <div>{user.name}</div>\n            <div>{user.username}</div>\n          </Column>\n        </Row>\n        <Row>\n          <span style={{ width: 80, textAlign: \"start\" }}>City:</span>\n          <span>{user.city}</span>\n        </Row>\n        <Row>\n          <span style={{ width: 80, textAlign: \"start\" }}>Age:</span>\n          <span>{user.age}</span>\n        </Row>\n        <Row>\n          <span style={{ width: 80, textAlign: \"start\" }}>Gender:</span>\n          <span>{user.gender}</span>\n        </Row>\n        <Row justifyContent=\"space-between\">\n          <Button onClick={onRefresh} style={{ width: \"45%\" }}>\n            Refresh\n          </Button>\n          <Button\n            onClick={onDelete}\n            style={{ width: \"45%\", background: \"red\", color: \"#fff\" }}\n          >\n            Delete\n          </Button>\n        </Row>\n      </Root>\n    )}\n  </Observer>\n);\nexport default DisplayUser;\n","import React from \"react\";\n\nconst Loading = () => <div>Loading</div>;\n\nexport default Loading;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { Observer } from \"mobx-react-lite\";\nimport UserModel, { GENDER_TYPES, TGender } from \"../models/User.model\";\nimport { Row } from \"./flex\";\n\ninterface IProps {\n  user: UserModel;\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  & > * {\n    margin: 5px 0;\n  }\n`;\n\nconst EditUser: React.FC<IProps> = ({ user }) => (\n  <Observer>\n    {() =>\n      user != null ? (\n        <Root>\n          <FromRow title=\"Name\">\n            <input\n              value={user.name ?? \"\"}\n              onChange={(e) => (user.name = e.target.value)}\n            />\n          </FromRow>\n          <FromRow title=\"Age\">\n            <input\n              type=\"number\"\n              value={user.age ?? \"\"}\n              onChange={(e) =>\n                !isNaN(+e.target.value) && (user.age = +e.target.value)\n              }\n            />\n          </FromRow>\n          <FromRow title=\"Gender\">\n            <select\n              style={{ width: 153 }}\n              value={user.gender ?? \"\"}\n              onChange={(e) => (user.gender = e.target.value as TGender)}\n            >\n              <option />\n              <option>{GENDER_TYPES.MALE}</option>\n              <option>{GENDER_TYPES.FEMALE}</option>\n            </select>\n          </FromRow>\n          <FromRow title=\"City\">\n            <input\n              value={user.city ?? \"\"}\n              onChange={(e) => (user.city = e.target.value)}\n            />\n          </FromRow>\n          <FromRow title=\"Photo url\">\n            <input\n              value={user.photoUrl ?? \"\"}\n              onChange={(e) => (user.photoUrl = e.target.value)}\n            />\n          </FromRow>\n        </Root>\n      ) : null\n    }\n  </Observer>\n);\n\nconst FromRow: React.FC<{ title: string }> = ({ title, children }) => (\n  <Row\n    alignItems=\"center\"\n    justifyContent=\"space-between\"\n    style={{ fontSize: 14, width: \"100%\" }}\n  >\n    <div>{title}</div>\n    {children}\n  </Row>\n);\n\nexport default EditUser;\n","import React from \"react\";\nimport \"./App.css\";\nimport { useStores } from \"./stores\";\nimport DisplayUser from \"./components/DisplayUser\";\nimport Loading from \"./components/Loading\";\nimport { Column } from \"./components/flex\";\nimport EditUser from \"./components/EditUser\";\nimport { Observer } from \"mobx-react-lite/\";\n\nconst App = () => {\n  const { currentUserStore } = useStores();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Observer>\n          {() =>\n            currentUserStore.initialized &&\n            currentUserStore.currentUser != null ? (\n              <Column>\n                <DisplayUser\n                  user={currentUserStore.currentUser}\n                  onRefresh={currentUserStore.refresh}\n                  onDelete={currentUserStore.delete}\n                />\n                <EditUser user={currentUserStore.currentUser} />\n              </Column>\n            ) : (\n              <Loading />\n            )\n          }\n        </Observer>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {loadState, saveState} from \"./utils/localStore\";\nimport {autorun} from \"mobx\";\nimport {RootStore, storesContext} from \"./stores\";\n\nconst initState = loadState();\nconst mobxStore = new RootStore(initState);\nautorun(\n    () => {\n        // console.dir(mobxStore);\n        saveState(mobxStore.serialize());\n    },\n    {delay: 1000}\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <storesContext.Provider value={mobxStore}>\n            <App/>\n        </storesContext.Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n","export const loadState = (): any | undefined => {\n    try {\n        const state = JSON.parse(localStorage.getItem(\"store\") as string);\n        return state || undefined;\n    } catch (error) {\n        console.log(error);\n        return undefined;\n    }\n};\nexport const saveState = (state: any): void => {\n    localStorage.setItem(\"store\", JSON.stringify(state));\n};\n"],"sourceRoot":""}